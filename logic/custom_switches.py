from ui.context_menu import CustomContextMenu

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –≤—ã–∫–ª—é—á–∞—Ç–µ–ª–µ–π
custom_switches = []  # –∫–∞–∂–¥—ã–π ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å info: canvas, id, pos, type

# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –¢–†–Å–•–ü–û–ó–ò–¶–ò–û–ù–ù–û–ì–û –í–´–ö–õ–Æ–ß–ê–¢–ï–õ–Ø ===
def register_three_switch(canvas, x, y, group_id=None):
    switch = {
        "type": "three",
        "position": "middle",
        "canvas": canvas,
        "x": x,
        "y": y,
        "group_id": group_id
    }

    line = canvas.create_line(x - 20, y - 25, x, y, width=2)
    switch["id"] = line

    def on_click(event):
        show_three_switch_menu(event, switch)

    hitbox = canvas.create_rectangle(x - 30, y - 30, x + 10, y + 10, fill="lightgray", stipple="gray25", outline="")
    canvas.tag_bind(line, "<Button-1>", on_click)
    canvas.tag_bind(hitbox, "<Button-1>", on_click)

    custom_switches.append(switch)


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –î–í–£–•–ü–û–ó–ò–¶–ò–û–ù–ù–û–ì–û –í–´–ö–õ–Æ–ß–ê–¢–ï–õ–Ø ===
def register_two_switch(canvas, x, y, group_id=None):
    switch = {
        "type": "two",
        "position": "off",
        "canvas": canvas,
        "x": x,
        "y": y,
        "group_id": group_id
    }

    line = canvas.create_line(x - 20, y - 25, x, y, width=2)
    switch["id"] = line

    def on_click(event):
        show_two_switch_menu(event, switch)

    hitbox = canvas.create_rectangle(x - 30, y - 30, x + 10, y + 10, fill="lightgray", stipple="gray25", outline="")
    canvas.tag_bind(line, "<Button-1>", on_click)
    canvas.tag_bind(hitbox, "<Button-1>", on_click)

    custom_switches.append(switch)

# === –ú–ï–ù–Æ –î–õ–Ø –¢–†–Å–•–ü–û–ó–ò–¶–ò–û–ù–ù–û–ì–û ===
def show_three_switch_menu(event, switch):
    menu = CustomContextMenu(switch["canvas"])
    current = switch["position"]
    group = switch.get("group_id")

    if group in ("cabinet3_left", "cabinet3_right"):
        block_due_to_local_two = any(
            sw["type"] == "two"
            and sw["position"] == "on"
            and sw.get("group_id") in ("cabinet3_left", "cabinet3_right")
            for sw in custom_switches
        )
    else:
        block_due_to_local_two = any(
            sw["type"] == "two"
            and sw["position"] == "on"
            and sw.get("group_id") == group
            for sw in custom_switches
        )


    options = [
        ("on", "Zajet Disconnectorem"),
        ("middle", "Mezipoloha"),
        ("short", "Zazkratovat")
    ]

    for value, label in options:
        disabled = False
        tooltip = None
        highlight = (current == value)

        # üîí 1. –ü–µ—Ä–≤–∞—è –∏ –≥–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Äì –¥–≤—É—Ö–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –≤–∫–ª—é—á—ë–Ω
        if block_due_to_local_two:
            disabled = True
            tooltip = "Nelze operovat ‚Äì vyp√≠naƒç ve stejn√©m panelu je zapnut√Ω"

        # ‚úÖ –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äì —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤—ã—à–µ
        if not disabled:
            if value == "on":
                conflict = is_group_conflict(switch, value)
                if conflict:
                    disabled = True
                    tooltip = conflict

            if (current == "on" and value == "short") or (current == "short" and value == "on"):
                disabled = True
                tooltip = "P≈ô√≠m√Ω p≈ôechod mezi ON a Zazkratovat je zak√°z√°n ‚Äì pou≈æijte mezipolohu"

        # üîí –ï—Å–ª–∏ –¥–≤—É—Ö–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –≤–∫–ª—é—á—ë–Ω

        # üîí –ù–µ–ª—å–∑—è –æ—Ç–∫–ª—é—á–∏—Ç—å ON, –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –≤ –≥—Ä—É–ø–ø–µ –≤ short
        if group in ("cabinet3_left", "cabinet3_right") and current == "on" and value in ("middle", "short"):
            if any(
                sw["type"] == "three"
                and sw is not switch
                and sw.get("group_id") in ("cabinet3_left", "cabinet3_right")
                and sw["position"] == "short"
                for sw in custom_switches
            ):
                disabled = True
                tooltip = "Nelze vypnout ‚Äì druh√Ω t≈ô√≠polohov√Ω sp√≠naƒç je zkratov√°n"

        # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ (on), –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª zkratovaƒç —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
        if value == "on":
            if group in ("cabinet4", "cabinet5"):
                if any(sw["group_id"] == "cabinet3_left" and sw["position"] == "short" for sw in custom_switches):
                    disabled = True
                    tooltip = "Nelze zapnout: lev√Ω zkratovaƒç BC je aktivn√≠"
            elif group in ("cabinet1", "cabinet2"):
                if any(sw["group_id"] == "cabinet3_right" and sw["position"] == "short" for sw in custom_switches):
                    disabled = True
                    tooltip = "Nelze zapnout: prav√Ω zkratovaƒç BC je aktivn√≠"

        # üîí –û–±—Ä–∞–±–æ—Ç–∫–∞ "Zazkratovat"
        if value == "short":
            # –ù–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            if group == "cabinet3_left":
                other_group = "cabinet3_right"
                excluded = {"cabinet4", "cabinet5"}
            elif group == "cabinet3_right":
                other_group = "cabinet3_left"
                excluded = {"cabinet1", "cabinet2"}
            else:
                other_group = group
                excluded = set()

            # –í—Ç–æ—Ä–æ–π –≤ –ø–∞—Ä–µ
            other = [
                sw for sw in custom_switches
                if sw["type"] == "three"
                and sw is not switch
                and sw.get("group_id") == other_group
            ]

            if any(sw["position"] == "short" for sw in other):
                disabled = True
                tooltip = "Nelze zazkratovat: v tomto poli je ji≈æ zkratov√°no"

            elif not any(sw["position"] == "on" for sw in other):
                disabled = True
                tooltip = "Zkratovat lze pouze pokud druh√Ω sp√≠naƒç je ve stavu ON"

            elif any(
                sw["type"] == "three"
                and sw.get("group_id") in excluded
                and sw["position"] == "on"
                for sw in custom_switches
            ):
                disabled = True
                tooltip = "Zkratovat nelze, pokud v druh√©m rozvadƒõƒçi je odpojovaƒç zapnut√Ω."

        menu.add_option(
            label,
            command=lambda v=value: set_three_switch_position(switch, v),
            enabled=not disabled and not highlight,
            highlight=highlight,
            tooltip_text=tooltip
        )

    menu.show(event.x_root, event.y_root)
    menu.close_on_click_outside()




# === –ú–ï–ù–Æ –î–õ–Ø –î–í–£–•–ü–û–ó–ò–¶–ò–û–ù–ù–û–ì–û ===
def show_two_switch_menu(event, switch):
    menu = CustomContextMenu(switch["canvas"])
    options = [
        ("on", "Zapnout"),
        ("off", "Vypnout")
    ]

    for value, label in options:
        is_current = (switch["position"] == value)
        disabled = False
        tooltip = None
        if value == "on":
            conflict = is_group_conflict(switch, value)
            if conflict:
                disabled = True
                tooltip = "Nelze zapnout, pokud je zapnut√Ω druh√Ω Incomer"
        # üîí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏—è (off)
        if value == "off" and switch["position"] == "on":
            group = switch.get("group_id")

            if group in ("cabinet3_left", "cabinet3_right"):
                # –í—Å–µ —Ç—Ä–µ—Ö–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑ cabinet3
                three_switches = [
                    sw for sw in custom_switches
                    if sw["type"] == "three" and sw.get("group_id") in ("cabinet3_left", "cabinet3_right")
                ]
                one_in_short = any(sw["position"] == "short" for sw in three_switches)
                one_in_on = any(sw["position"] == "on" for sw in three_switches)

                if one_in_short and one_in_on:
                    disabled = True
                    tooltip = "Vypnut√≠ je mo≈æn√© pouze pomoc√≠ manu√°ln√≠ho tlaƒç√≠tka, pokud jste ve stavu ‚ÄûZazkratov√°no‚Äú."
            else:
                # –í –¥—Ä—É–≥–∏—Ö —à–∫–∞—Ñ–∞—Ö: –µ—Å–ª–∏ —Ç—Ä—ë—Ö–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –≤ short
                three_in_short = any(
                    sw["type"] == "three"
                    and sw.get("group_id") == group
                    and sw["position"] == "short"
                    for sw in custom_switches
                )
                if three_in_short:
                    disabled = True
                    tooltip = "Vypnut√≠ je mo≈æn√© pouze pomoc√≠ manu√°ln√≠ho tlaƒç√≠tka, pokud jste ve stavu ‚ÄûZazkratov√°no‚Äú."

        menu.add_option(
            label,
            command=lambda v=value: set_two_switch_position(switch, v),
            enabled=not is_current and not disabled,
            highlight=is_current,
            tooltip_text=tooltip
        )

    menu.show(event.x_root, event.y_root)
    menu.close_on_click_outside()



# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ò–ù–ò–ò (–¢–†–Å–•–ü–û–ó–ò–¶–ò–û–ù–ù–´–ô) ===
def set_three_switch_position(switch, pos):
    canvas = switch["canvas"]
    x, y = switch["x"], switch["y"]
    current = switch["position"]

    # ‚ùó –ó–∞–ø—Ä–µ—Ç –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É on –∏ short
    if (current == "on" and pos == "short") or (current == "short" and pos == "on"):
        # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ "middle"
        return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –º–æ–∂–Ω–æ –ø–æ–¥—Å–≤–µ—Ç–∏—Ç—å/–≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é

    # ‚è™ –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ ‚Äî –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º
    if current == pos:
        return

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–∏–Ω–∏—é
    canvas.delete(switch["id"])

    coords = {
        "on": (x, y - 25, x, y),
        "middle": (x - 20, y - 25, x, y),
        "short": (x - 40, y, x, y)
    }

    line = canvas.create_line(*coords[pos], width=2)
    canvas.tag_bind(line, "<Button-1>", lambda e: show_three_switch_menu(e, switch))

    switch["id"] = line
    switch["position"] = pos


# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –õ–ò–ù–ò–ò (–î–í–£–•–ü–û–ó–ò–¶–ò–û–ù–ù–´–ô) ===
def set_two_switch_position(switch, pos):
    canvas = switch["canvas"]
    canvas.delete(switch["id"])

    x, y = switch["x"], switch["y"]

    coords = {
        "off": (x - 20, y - 25, x, y),
        "on": (x, y - 25, x, y)
    }

    line = canvas.create_line(*coords[pos], width=2)
    canvas.tag_bind(line, "<Button-1>", lambda e: show_two_switch_menu(e, switch))

    switch["id"] = line
    switch["position"] = pos
# –û–±–Ω–æ–≤–ª—è–µ–º custom_switches, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –∑–∞–º–µ–Ω–∏–ª—Å—è



def force_turn_off_two_switches_by_group(group_id):
    for sw in custom_switches:
        if sw["type"] == "two" and sw.get("group_id") == group_id:
            set_two_switch_position(sw, "off")
            
def is_group_conflict(switch, new_pos):
    if new_pos != "on":
        return False

    group = switch.get("group_id")
    if group not in ("cabinet2", "cabinet4"):
        return False

    other = "cabinet4" if group == "cabinet2" else "cabinet2"

    for sw in custom_switches:
        if sw.get("group_id") == other and sw["position"] == "on":
            return f"Nelze zapnout: { 'druh√Ω' if other == 'cabinet4' else 'prvn√≠' } Incomer je ji≈æ aktivn√≠"
    return False