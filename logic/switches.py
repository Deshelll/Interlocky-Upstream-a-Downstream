import tkinter as tk
import customtkinter as ctk
from logic import state
from ui.context_menu import CustomContextMenu
from canvas_elements import Line, GroundSymbol
from logic import state, switches

# ====== –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ======

def is_switch_transition_allowed(position):
# –ó–∞–ø—Ä–µ—â–∞–µ–º short, –µ—Å–ª–∏ –Ω–∏–∂–Ω–∏–π –≤ on
    if position == "short" and state.current_lower_switch_state == "on":
        return ("lower_on_block", "–ù–µ–ª—å–∑—è –∑–∞–º–∫–Ω—É—Ç—å: –Ω–∏–∂–Ω–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —à–∏–Ω–µ")

    # –ó–∞–ø—Ä–µ—â–∞–µ–º on, –µ—Å–ª–∏ –Ω–∏–∂–Ω–∏–π –≤ short
    if position == "on" and state.current_lower_switch_state == "short":
        return ("lower_short_block", "–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å: –Ω–∏–∂–Ω–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –∑–∞—à—É–Ω—Ç–∏—Ä–æ–≤–∞–Ω")
    if state.current_switch_state == position:
        return "current"
    if state.current_middle_upper_state == "on" and position in ("on", "short"):
        return ("middle_upper", "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å: –≤–µ—Ä—Ö–Ω–∏–π —Å—Ä–µ–¥–Ω–∏–π –∫–ª—é—á —É–∂–µ –≤–∫–ª—é—á—ë–Ω")
    if state.current_middle_upper_state == "on" and state.current_switch_state in ("on", "short") and position == "middle":
        return ("mid_back", "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ '–≤—ã–∫–ª.'")
    if state.voltage_state == 1 and position == "short":
        return ("voltage_short", "–ù–µ–ª—å–∑—è –∑–∞–º–∫–Ω—É—Ç—å –ø—Ä–∏ –ø–æ–¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏")
    if state.current_switch_state == "on" and position == "short":
        return ("on_short", "–ù–µ–ª—å–∑—è —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∏–∑ '–≤–∫–ª.' –≤ –∑–∞–º—ã–∫–∞–Ω–∏–µ")
    return True

def is_lower_switch_transition_allowed(position):
# –ó–∞–ø—Ä–µ—â–∞–µ–º short, –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π –≤ on
    if position == "short" and state.current_switch_state == "on":
        return ("upper_on_block", "–ù–µ–ª—å–∑—è –∑–∞–º–∫–Ω—É—Ç—å: –≤–µ—Ä—Ö–Ω–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ —à–∏–Ω–µ")

    # –ó–∞–ø—Ä–µ—â–∞–µ–º on, –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω–∏–π –≤ short
    if position == "on" and state.current_switch_state == "short":
        return ("upper_short_block", "–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å: –≤–µ—Ä—Ö–Ω–∏–π –≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å –∑–∞—à—É–Ω—Ç–∏—Ä–æ–≤–∞–Ω")
    if state.current_lower_switch_state == position:
        return "current"
    if not state.set_middle_lower_position_allowed and position == "on":
        return ("not_allowed", "–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ '–≤–∫–ª.' –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π")
    if position in ("on", "short") and state.current_lower_switch_state != "middle":
        return ("not_middle", "–ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ '—Å—Ä–µ–¥–Ω–µ–≥–æ' –ø–æ–ª–æ–∂–µ–Ω–∏—è")
    if state.current_middle_lower_state == "on" and position in ("on", "short"):
        return ("ml_on", "–°—Ä–µ–¥–Ω–∏–π –Ω–∏–∂–Ω–∏–π –∫–ª—é—á —É–∂–µ –≤–æ '–≤–∫–ª.'")
    if state.current_middle_lower_state == "on" and state.current_lower_switch_state in ("on", "short") and position == "middle":
        return ("ml_mid_block", "–ù–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ '—Å—Ä–µ–¥–Ω–µ–µ' ‚Äî –∞–∫—Ç–∏–≤–Ω–∞ —Å—Ä–µ–¥–Ω—è—è –ª–∏–Ω–∏—è")
    if state.current_lower_switch_state == "on" and position == "short":
        return ("lower_on_short", "–ù–µ–ª—å–∑—è –∑–∞–º–∫–Ω—É—Ç—å –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –Ω–∏–∂–Ω–µ–º –∫–ª—é—á–µ")
    if state.voltage_state == 1 and position == "short":
        return ("voltage_short", "–ù–µ–ª—å–∑—è –∑–∞–º–∫–Ω—É—Ç—å –ø—Ä–∏ –ø–æ–¥–∞–Ω–Ω–æ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–∏")
    return True

def is_middle_upper_transition_allowed(position):

    if position == "off":
        if state.current_switch_state == "short":
            return ("short_block", "–ù–µ–ª—å–∑—è –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –∑–∞–º–∫–Ω—É—Ç–æ–º —Ç—Ä—ë—Ö–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏–∫–µ")
    if state.current_middle_upper_state == position:
        return "current"
    if not state.set_middle_upper_position_allowed and position == "on":
        return ("not_allowed", "–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ '–≤–∫–ª.' –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π")
    if (
        position == "on"
        and state.current_middle_lower_state == "on"
        and state.current_lower_switch_state == "on"
        and state.current_switch_state == "on"
    ):
        return ("all_on", "–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å: –≤—Å–µ –∫–ª—é—á–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã")
    if state.voltage_state == 1 and position == "on" and state.current_switch_state == "on":
        return ("voltage_block", "–ü–æ–¥–∞–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∫–ª—é—á–µ")
    return True

def is_middle_lower_transition_allowed(position):
    # ‚ùó –∑–∞–ø—Ä–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ short –∏ –∞–∫—Ç–∏–≤–Ω–æ–º –Ω–∏–∂–Ω–µ–º –∫–ª—é—á–µ
    if position == "off" and state.current_middle_lower_state == "on":
        if state.current_lower_switch_state == "short":
            return ("short_block", "–ù–µ–ª—å–∑—è –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –∑–∞–º–∫–Ω—É—Ç–æ–º —Ç—Ä—ë—Ö–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∏–∫–µ (–Ω–∏–∂–Ω–∏–π)")

    # ‚úÖ return "current" ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—Ä–µ—Ç–∞ –≤—ã—à–µ
    if state.current_middle_lower_state == position:
        return "current"

    if not state.set_middle_lower_position_allowed and position == "on":
        return ("not_allowed", "–ü–µ—Ä–µ—Ö–æ–¥ –≤–æ '–≤–∫–ª.' –∑–∞–ø—Ä–µ—â—ë–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π")
    if position == "on" and state.current_middle_upper_state != "on":
        return ("mu_off", "–ù–µ–ª—å–∑—è –≤–∫–ª—é—á–∏—Ç—å: –≤–µ—Ä—Ö–Ω–∏–π —Å—Ä–µ–¥–Ω–∏–π –∫–ª—é—á –Ω–µ –≤–æ '–≤–∫–ª.'")
    if state.voltage_state == 1 and position == "on" and state.current_lower_switch_state == "on":
        return ("voltage_block", "–ü–æ–¥–∞–Ω–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –Ω–∏–∂–Ω–µ–º –∫–ª—é—á–µ")

    return True

# ====== –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ======

def toggle_voltage(canvas):
    state.voltage_state = 1 - state.voltage_state
    color = "red" if state.voltage_state else "green"
    canvas.itemconfig(state.voltage_indicator, fill=color)

def set_switch_position(position, canvas):
    offset_x = 150
    offset_y = 50

    if not is_switch_transition_allowed(position) == True:
        return
    for el in state.switch_parts:
        canvas.delete(el)
    state.switch_parts.clear()
    coords = {
        "short": (130 + offset_x, 105 + offset_y, 200 + offset_x, 105 + offset_y),
        "middle": (180 + offset_x, 80 + offset_y, 200 + offset_x, 105 + offset_y),
        "on": (200 + offset_x, 80 + offset_y, 200 + offset_x, 105 + offset_y)
    }
    line = canvas.create_line(*coords[position], width=2)
    state.switch_parts.append(line)
    canvas.tag_bind(line, "<Button-1>", lambda e: on_switch_click(e, canvas))
    state.current_switch_state = position

def set_lower_switch_position(position, canvas):
    offset_x = 150
    offset_y = 50

    if not is_lower_switch_transition_allowed(position) == True:
        return
    for el in state.lower_switch_parts:
        canvas.delete(el)
    state.lower_switch_parts.clear()
    coords = {
        "short": (130 + offset_x, 315 + offset_y, 200 + offset_x, 315 + offset_y),
        "middle": (180 + offset_x, 340 + offset_y, 200 + offset_x, 315 + offset_y),
        "on": (200 + offset_x, 340 + offset_y, 200 + offset_x, 315 + offset_y)
    }
    line = canvas.create_line(*coords[position], width=2)
    state.lower_switch_parts.append(line)
    canvas.tag_bind(line, "<Button-1>", lambda e: on_lower_switch_click(e, canvas))
    state.current_lower_switch_state = position

def set_middle_upper_position(position, canvas):
    offset_x = 150
    offset_y = 50

    if not is_middle_upper_transition_allowed(position) == True:
        return

    for el in state.middle_upper_parts:
        canvas.delete(el)
    state.middle_upper_parts.clear()

    coords = {
        "off": (180 + offset_x, 130 + offset_y, 200 + offset_x, 155 + offset_y),
        "on": (200 + offset_x, 130 + offset_y, 200 + offset_x, 155 + offset_y)
    }
    line = canvas.create_line(*coords[position], width=2)
    state.middle_upper_parts.append(line)
    canvas.tag_bind(line, "<Button-1>", lambda e: on_middle_upper_click(e, canvas))
    state.current_middle_upper_state = position

    if position == "off":
        # üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞
        state.current_middle_lower_state = "off"
        for el in state.middle_lower_parts:
            canvas.delete(el)
        state.middle_lower_parts.clear()
        lower_coords = (180 + offset_x, 286 + offset_y, 200 + offset_x, 261 + offset_y)
        lower_line = canvas.create_line(*lower_coords, width=2)
        state.middle_lower_parts.append(lower_line)
        canvas.tag_bind(lower_line, "<Button-1>", lambda e: on_middle_lower_click(e, canvas))


def set_middle_lower_position(position, canvas):
    offset_x = 150
    offset_y = 50

    if not is_middle_lower_transition_allowed(position) == True:
        return
    for el in state.middle_lower_parts:
        canvas.delete(el)
    state.middle_lower_parts.clear()
    coords = {
        "off": (180 + offset_x, 286 + offset_y, 200 + offset_x, 261 + offset_y),
        "on": (200 + offset_x, 286 + offset_y, 200 + offset_x, 261 + offset_y)
    }
    line = canvas.create_line(*coords[position], width=2)
    state.middle_lower_parts.append(line)
    canvas.tag_bind(line, "<Button-1>", lambda e: on_middle_lower_click(e, canvas))
    state.current_middle_lower_state = position

# ====== –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –º–µ–Ω—é ======

def on_switch_click(event, canvas):
    menu = CustomContextMenu(canvas)
    items = [("on", "Zajet Disconnectorem"), ("middle", "Mezipoloha"), ("short", "Zazkratovat")]

    allowed_map = {pos: is_switch_transition_allowed(pos) for pos, _ in items}
    any_enabled = any(v is True for v in allowed_map.values())

    for pos, label in items:
        result = allowed_map[pos]
        highlight = (result == "current") if any_enabled else False
        tooltip = None
        if isinstance(result, tuple):
            tooltip = result[1]
        elif highlight:
            tooltip = "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç, —Ç.–∫. –≤—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—ë–º"
        menu.add_option(label, lambda p=pos: set_switch_position(p, canvas), enabled=(result is True), highlight=highlight, tooltip_text=tooltip)

    menu.show(event.x_root, event.y_root)
    menu.close_on_click_outside()

def on_lower_switch_click(event, canvas):
    menu = CustomContextMenu(canvas)
    items = [("on", "Zajet Disconnectorem"), ("middle", "Mezipoloha"), ("short", "Zazkratovat")]

    allowed_map = {pos: is_lower_switch_transition_allowed(pos) for pos, _ in items}
    any_enabled = any(v is True for v in allowed_map.values())

    for pos, label in items:
        result = allowed_map[pos]
        highlight = (result == "current") if any_enabled else False
        tooltip = None
        if isinstance(result, tuple):
            tooltip = result[1]
        elif highlight:
            tooltip = "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç, —Ç.–∫. –≤—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—ë–º"
        menu.add_option(label, lambda p=pos: set_lower_switch_position(p, canvas), enabled=(result is True), highlight=highlight, tooltip_text=tooltip)

    menu.show(event.x_root, event.y_root)
    menu.close_on_click_outside()

def on_middle_upper_click(event, canvas):
    menu = CustomContextMenu(canvas)
    items = [("on", "Zapnout"), ("off", "Vypnout")]

    allowed_map = {pos: is_middle_upper_transition_allowed(pos) for pos, _ in items}
    any_enabled = any(v is True for v in allowed_map.values())

    for pos, label in items:
        result = allowed_map[pos]
        highlight = (result == "current") if any_enabled else False
        tooltip = None
        if isinstance(result, tuple):
            tooltip = result[1]
        elif highlight:
            tooltip = "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç, —Ç.–∫. –≤—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—ë–º"
        menu.add_option(label, lambda p=pos: set_middle_upper_position(p, canvas), enabled=(result is True), highlight=highlight, tooltip_text=tooltip)

    menu.show(event.x_root, event.y_root)
    menu.close_on_click_outside()

def on_middle_lower_click(event, canvas):
    menu = CustomContextMenu(canvas)
    items = [("on", "Zapnout"), ("off", "Vypnout")]

    allowed_map = {pos: is_middle_lower_transition_allowed(pos) for pos, _ in items}
    any_enabled = any(v is True for v in allowed_map.values())

    for pos, label in items:
        result = allowed_map[pos]
        highlight = (result == "current") if any_enabled else False
        tooltip = None
        if isinstance(result, tuple):
            tooltip = result[1]
        elif highlight:
            tooltip = "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç, —Ç.–∫. –≤—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω—ë–º"
        menu.add_option(label, lambda p=pos: set_middle_lower_position(p, canvas), enabled=(result is True), highlight=highlight, tooltip_text=tooltip)

    menu.show(event.x_root, event.y_root)
    menu.close_on_click_outside()

def trip_transformer(canvas):
    if state.current_middle_upper_state == "on":
        set_middle_upper_position("off", canvas)
